name: Deploy to cafe24(gh1870)

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: kangho1870/pinpal
  DOCKER_TAG: latest

jobs:
  build-backend:
    name: Build Backend and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build JAR
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: allcover_project/package-lock.json

      - name: Install dependencies
        run: |
          cd allcover_project
          npm ci --legacy-peer-deps

      - name: Build frontend
        run: |
          cd allcover_project
          CI=false npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: allcover_project/build/

  deploy:
    name: Deploy to Cafe24 Server
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build/

      - name: Test SSH connection
        run: |
          echo "SSH 연결 테스트 시작..."
          echo "포트 22로 시도..."
          sshpass -p '${{ secrets.CAFE24_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.CAFE24_USERNAME }}@${{ secrets.CAFE24_HOST }} -p 22 "echo 'SSH 연결 테스트 성공!'; whoami; pwd; date" || echo "포트 22 실패"
        env:
          SSHPASS: ${{ secrets.CAFE24_PASSWORD }}

      - name: Deploy to Cafe24
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CAFE24_HOST }}
          username: ${{ secrets.CAFE24_USERNAME }}
          password: ${{ secrets.CAFE24_PASSWORD }}
          port: 22
          script: |
            # GitHub Actions에서 사용하는 실제 IP 확인
            echo "=== GitHub Actions IP 확인 ==="
            echo "현재 연결된 IP: $(curl -s ifconfig.me)"
            echo "현재 연결된 IP (다른 방법): $(curl -s ipinfo.io/ip)"
            echo "현재 연결된 IP (또 다른 방법): $(curl -s icanhazip.com)"
            echo ""
            
            # 기존 배포 스크립트
            echo "배포 시작..."
            
            # 기존 컨테이너 중지 및 제거
            docker stop pinpal-backend || true
            docker rm pinpal-backend || true
            
            # 새 이미지로 컨테이너 실행
            docker run -d \
              --name pinpal-backend \
              --restart unless-stopped \
              --network host \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL="jdbc:postgresql://localhost:5432/pinpal" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
              -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
              -e KAKAO_REDIRECT_URI="http://211.37.173.106:3000/auth/kakao/callback" \
              -e JAVA_OPTS="-Dhibernate.dialect=org.hibernate.dialect.PostgreSQLDialect -Djakarta.persistence.jdbc.url=${{ secrets.DB_URL }}" \
              kangho1870/pinpal:latest
            
            # 컨테이너 상태 확인
            echo "컨테이너 상태 확인 중..."
            docker ps
            
            # 컨테이너가 실행되지 않은 경우 로그 확인
            if ! docker ps | grep -q pinpal-backend; then
              echo "❌ 컨테이너가 실행되지 않았습니다. 로그를 확인합니다..."
              docker logs pinpal-backend --tail 50 2>/dev/null || echo "로그를 읽을 수 없음"
              
              # 컨테이너 재시작 시도
              echo "🔄 컨테이너 재시작을 시도합니다..."
              docker start pinpal-backend || echo "재시작 실패"
              sleep 10
              docker logs pinpal-backend --tail 30 2>/dev/null || echo "재시작 후 로그를 읽을 수 없음"
            else
              echo "✅ 컨테이너가 정상적으로 실행 중입니다."
              # 컨테이너 로그 확인
              echo "컨테이너 로그 확인 중..."
              docker logs pinpal-backend --tail 20
            fi
            
            # 상세한 문제 진단
            echo "=== 상세 진단 시작 ==="
            echo "1. Docker 컨테이너 상태:"
            docker ps -a
            
            echo "2. Docker 네트워크 확인:"
            docker network ls
            
            echo "3. 시스템 리소스 확인:"
            free -h
            df -h
            
            echo "4. 포트 사용 현황:"
            netstat -tlnp | grep :8000 || echo "포트 8000이 사용되지 않음"
            
            echo "5. 컨테이너 상세 정보:"
            docker inspect pinpal-backend 2>/dev/null || echo "컨테이너가 존재하지 않음"
            
            echo "6. 최근 Docker 로그:"
            docker logs pinpal-backend --tail 50 2>/dev/null || echo "로그를 읽을 수 없음"
            
            echo "7. 데이터베이스 연결 테스트:"
            PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql -U "${{ secrets.DB_USERNAME }}" -h localhost -p 5432 -d pinpal -c "SELECT version();" 2>/dev/null || echo "데이터베이스 연결 실패"
            
            echo "8. 애플리케이션 헬스 체크:"
            curl -f http://localhost:8000/actuator/health 2>/dev/null || echo "애플리케이션 헬스 체크 실패"

      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Print Public IP
        run: |
          echo "GitHub Actions에서 사용하는 공인 IP: ${{ steps.ip.outputs.ipv4 }}"
          echo "이 IP를 Cafe24 방화벽에 추가해야 합니다!"
          echo "방화벽에서 '허용 IP 추가' 버튼을 클릭하고 다음을 입력하세요:"
          echo "프로토콜: tcp"
          echo "포트: 22"
          echo "접근허용 IP: ${{ steps.ip.outputs.ipv4 }}"

      - name: Deploy frontend to Cafe24
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CAFE24_HOST }}
          username: ${{ secrets.CAFE24_USERNAME }}
          password: ${{ secrets.CAFE24_PASSWORD }}
          port: ${{ secrets.CAFE24_PORT }}
          timeout: 60s
          source: "frontend-build/*"
          target: "/home/${{ secrets.CAFE24_USERNAME }}/pinpal-frontend"

      - name: Setup frontend service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CAFE24_HOST }}
          username: ${{ secrets.CAFE24_USERNAME }}
          password: ${{ secrets.CAFE24_PASSWORD }}
          port: ${{ secrets.CAFE24_PORT }}
          timeout: 120s
          command_timeout: 120s
          script: |
            # 프론트엔드 디렉토리 확인
            echo "프론트엔드 디렉토리 확인 중..."
            ls -la /home/${{ secrets.CAFE24_USERNAME }}/pinpal-frontend/
            
            # serve 패키지 설치
            echo "serve 패키지 설치 중..."
            sudo npm install -g serve
            
            # systemd 서비스 파일 생성 (serve 사용)
            echo "systemd 서비스 파일 생성 중..."
            sudo tee /etc/systemd/system/pinpal-frontend.service > /dev/null <<EOF
            [Unit]
            Description=Pinpal Frontend Server (serve)
            After=network.target
            
            [Service]
            Type=simple
            User=${{ secrets.CAFE24_USERNAME }}
            WorkingDirectory=/home/${{ secrets.CAFE24_USERNAME }}/pinpal-frontend/frontend-build
            ExecStart=/usr/bin/npx serve -s . -l 3000 --single
            Restart=always
            RestartSec=10
            StandardOutput=journal
            StandardError=journal
            TimeoutStartSec=60
            TimeoutStopSec=30
            Environment=NODE_ENV=production
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # 기존 서비스 중지 및 재시작
            echo "프론트엔드 서비스 재시작 중..."
            sudo systemctl daemon-reload
            sudo systemctl stop pinpal-frontend || true
            sudo systemctl start pinpal-frontend
            sudo systemctl enable pinpal-frontend
            
            # 서비스 상태 확인
            sleep 5
            echo "프론트엔드 서비스 상태 확인 중..."
            sudo systemctl status pinpal-frontend --no-pager
            
            # 포트 확인
            echo "포트 3000 확인 중..."
            netstat -tlnp | grep :3000 || echo "포트 3000이 열리지 않았습니다."
            
            # 로그 확인
            echo "프론트엔드 로그 확인 중..."
            sudo journalctl -u pinpal-frontend --no-pager -n 10
            
            echo "Frontend service setup completed!"