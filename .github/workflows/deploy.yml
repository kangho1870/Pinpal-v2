name: Deploy to cafe24(gh1870)

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: kangho1870/pinpal
  DOCKER_TAG: latest

jobs:
  build-backend:
    name: Build Backend and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build JAR
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: allcover_project/package-lock.json

      - name: Install dependencies
        run: |
          cd allcover_project
          npm ci --legacy-peer-deps

      - name: Build frontend
        run: |
          cd allcover_project
          CI=false npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: allcover_project/build/

  deploy:
    name: Deploy to Cafe24 Server
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build/

      - name: Test SSH connection
        run: |
          echo "SSH 연결 테스트 시작..."
          echo "포트 22로 시도..."
          sshpass -p '${{ secrets.CAFE24_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.CAFE24_USERNAME }}@${{ secrets.CAFE24_HOST }} -p 22 "echo 'SSH 연결 테스트 성공!'; whoami; pwd; date" || echo "포트 22 실패"
        env:
          SSHPASS: ${{ secrets.CAFE24_PASSWORD }}

      - name: Deploy to Cafe24
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CAFE24_HOST }}
          username: ${{ secrets.CAFE24_USERNAME }}
          password: ${{ secrets.CAFE24_PASSWORD }}
          port: ${{ secrets.CAFE24_PORT }}
          timeout: 60s
          command_timeout: 60s
          script: |
            # Docker 이미지 pull
            echo "Docker 이미지 pull 중..."
            docker pull "${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
            
            # 기존 컨테이너 확인 및 정리
            echo "기존 컨테이너 정리 중..."
            if docker ps -a | grep -q pinpal-backend; then
              echo "기존 컨테이너 중지 및 삭제..."
              docker stop pinpal-backend || true
              docker rm pinpal-backend || true
            else
              echo "기존 컨테이너가 없습니다."
            fi
            
            # 환경 변수 설정
            echo "환경 변수 설정 중..."
            export SPRING_PROFILES_ACTIVE="prod"
            export SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}"
            export KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}"
            
            # 새 컨테이너 실행 (호스트 네트워크 모드)
            echo "새 컨테이너 실행 중 (호스트 네트워크 모드)..."
            docker run -d \
              --name pinpal-backend \
              --network host \
              --restart unless-stopped \
              -e "SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}" \
              -e "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" \
              -e "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" \
              -e "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" \
              -e "JWT_SECRET=${JWT_SECRET}" \
              -e "KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}" \
              -e "KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}" \
              "${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
            
            # 컨테이너 상태 확인
            echo "컨테이너 상태 확인 중..."
            sleep 5
            docker ps
            echo "컨테이너 로그 확인 중..."
            docker logs pinpal-backend --tail 20
            
            # 상세한 문제 진단
            echo "=== 상세 진단 시작 ==="
            echo "1. Docker 컨테이너 상태:"
            docker ps -a
            
            echo "2. Docker 네트워크 확인:"
            docker network ls
            
            echo "3. 시스템 리소스 확인:"
            free -h
            df -h
            
            echo "4. 포트 사용 현황:"
            netstat -tlnp | grep :8000 || echo "포트 8000이 사용되지 않음"
            
            echo "5. 컨테이너 상세 정보:"
            docker inspect pinpal-backend 2>/dev/null || echo "컨테이너가 존재하지 않음"
            
            echo "6. 최근 Docker 로그:"
            docker logs pinpal-backend --tail 50 2>/dev/null || echo "로그를 읽을 수 없음"

      - name: Deploy frontend to Cafe24
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CAFE24_HOST }}
          username: ${{ secrets.CAFE24_USERNAME }}
          password: ${{ secrets.CAFE24_PASSWORD }}
          port: ${{ secrets.CAFE24_PORT }}
          timeout: 60s
          source: "frontend-build/*"
          target: "/home/${{ secrets.CAFE24_USERNAME }}/pinpal-frontend"

      - name: Setup frontend service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CAFE24_HOST }}
          username: ${{ secrets.CAFE24_USERNAME }}
          password: ${{ secrets.CAFE24_PASSWORD }}
          port: ${{ secrets.CAFE24_PORT }}
          timeout: 120s
          command_timeout: 120s
          script: |
            # 프론트엔드 디렉토리 확인
            echo "프론트엔드 디렉토리 확인 중..."
            ls -la /home/${{ secrets.CAFE24_USERNAME }}/pinpal-frontend/
            
            # serve 패키지 설치
            echo "serve 패키지 설치 중..."
            sudo npm install -g serve
            
            # systemd 서비스 파일 생성 (serve 사용)
            echo "systemd 서비스 파일 생성 중..."
            sudo tee /etc/systemd/system/pinpal-frontend.service > /dev/null <<EOF
            [Unit]
            Description=Pinpal Frontend Server (serve)
            After=network.target
            
            [Service]
            Type=simple
            User=${{ secrets.CAFE24_USERNAME }}
            WorkingDirectory=/home/${{ secrets.CAFE24_USERNAME }}/pinpal-frontend/frontend-build
            ExecStart=/usr/bin/npx serve -s . -l 3000 --single
            Restart=always
            RestartSec=10
            StandardOutput=journal
            StandardError=journal
            TimeoutStartSec=60
            TimeoutStopSec=30
            Environment=NODE_ENV=production
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # 기존 서비스 중지 및 재시작
            echo "프론트엔드 서비스 재시작 중..."
            sudo systemctl daemon-reload
            sudo systemctl stop pinpal-frontend || true
            sudo systemctl start pinpal-frontend
            sudo systemctl enable pinpal-frontend
            
            # 서비스 상태 확인
            sleep 5
            echo "프론트엔드 서비스 상태 확인 중..."
            sudo systemctl status pinpal-frontend --no-pager
            
            # 포트 확인
            echo "포트 3000 확인 중..."
            netstat -tlnp | grep :3000 || echo "포트 3000이 열리지 않았습니다."
            
            # 로그 확인
            echo "프론트엔드 로그 확인 중..."
            sudo journalctl -u pinpal-frontend --no-pager -n 10
            
            echo "Frontend service setup completed!"