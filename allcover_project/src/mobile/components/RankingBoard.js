import { useState, useRef, useEffect, useMemo } from "react";
import 'animate.css';
import styles from "../css/components/RankingBoard.module.css";
import useScoreboard from "../../stores/useScoreboardStore";
import useSignInStore from "../../stores/useSignInStore";

function RankingBoard({ sideRankingModalToggle, scoreInputModalToggle }) {
    const { members = [] } = useScoreboard();
    const { signInUser } = useSignInStore();
    const memberId = signInUser?.id || null;
    const [showMyScore, setShowMyScore] = useState(false);
    const myScoreRef = useRef(null);
    const scrollContainerRef = useRef(null);

    // Ï†êÏàò ÏßëÍ≥Ñ Ï¢ÖÎ£å ÏÉÅÌÉú ÌôïÏù∏ (Í≤åÏûÑ Ï¢ÖÎ£åÏôÄ ÎèôÏùº)
    const isScoreCountingStopped = members.length > 0 && members[0]?.scoreCounting === false;
    
    // Ï†êÏàò ÏûÖÎ†•Ïù¥ Ï∞®Îã®ÎêòÏñ¥Ïïº ÌïòÎäî ÏÉÅÌÉú (Ï†êÏàò ÏßëÍ≥Ñ Ï¢ÖÎ£å)
    const isScoreInputBlocked = isScoreCountingStopped;

    const getCardClass = (grade) => {
        switch (grade) {
            case 0:
                return styles.scoreCard0;
            case 1:
                return styles.scoreCard1;
            case 2:
                return styles.scoreCard2;
            case 3:
                return styles.scoreCard3;
            case 4:
                return styles.scoreCard4;
            case 5:
                return styles.scoreCard5;
            case 6:
                return styles.scoreCard6;    
            default:
                return "";
        }
    };

    function getAvgScore(...scores) {
        const validScores = scores.filter(score => score !== null && score !== undefined && score > 0);
        const totalScore = validScores.reduce((acc, score) => acc + score, 0);
        if (validScores.length === 0) return 0;
        const avg = totalScore / validScores.length;
        return Number.isInteger(avg) ? avg : avg.toFixed(0);
    }

    const sortedMembers = useMemo(() => {
        return Array.isArray(members) ? [...members].sort((a, b) => {
            const totalA = (a?.game1 || 0) + (a?.game2 || 0) + (a?.game3 || 0) + (a?.game4 || 0);
            const totalB = (b?.game1 || 0) + (b?.game2 || 0) + (b?.game3 || 0) + (b?.game4 || 0);
            return totalB - totalA;
        }) : [];
    }, [members]);

    const topTotalScore = sortedMembers.length > 0 
        ? (sortedMembers[0]?.game1 || 0) + (sortedMembers[0]?.game2 || 0) + (sortedMembers[0]?.game3 || 0) + (sortedMembers[0]?.game4 || 0) 
        : 0;

    // ÏÇ¨Ïù¥Îìú ÏàúÏúÑ Í≥ÑÏÇ∞ Ìï®ÏàòÎì§
    const getSideGrade1Members = () => {
        return members.filter(member => member?.sideGrade1 === true);
    };

    const getSideAvgMembers = () => {
        return members.filter(member => member?.sideAvg === true);
    };

    const isAllSideMembersScored = (sideMembers) => {
        if (sideMembers.length === 0) return false;
        return sideMembers.every(member => 
            member?.game1 !== null && member?.game1 !== undefined && member?.game1 > 0
        );
    };



    // ÎÇ¥ Ï†êÏàò Ïù∏Îç±Ïä§ Ï∞æÍ∏∞
    const myScoreIndex = sortedMembers.findIndex(member => member?.memberId === memberId);

    // ÌéòÏù¥ÏßÄ ÏßÑÏûÖ Ïãú ÎÇ¥ Ï†êÏàò Ïπ¥ÎìúÎ•º Ï§ëÏïôÏúºÎ°ú Ïä§ÌÅ¨Î°§
    useEffect(() => {
        if (myScoreIndex >= 0 && myScoreRef.current && scrollContainerRef.current) {
            const container = scrollContainerRef.current;
            const cardElement = myScoreRef.current;
            const containerHeight = container.clientHeight;
            const cardHeight = cardElement.offsetHeight;
            const cardTop = cardElement.offsetTop;
            
            // Ïπ¥ÎìúÎ•º Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏïôÏóê ÏúÑÏπòÏãúÌÇ§Í∏∞ ÏúÑÌïú Ïä§ÌÅ¨Î°§ ÏúÑÏπò Í≥ÑÏÇ∞
            const scrollTop = cardTop - (containerHeight / 2) + (cardHeight / 2);
            
            container.scrollTo({
                top: scrollTop,
                behavior: 'smooth'
            });
        }
    }, [myScoreIndex, sortedMembers]);

    const findMyScore = () => {
        if (myScoreIndex >= 0) {
            setShowMyScore(true);
            if (myScoreRef.current && scrollContainerRef.current) {
                const container = scrollContainerRef.current;
                const cardElement = myScoreRef.current;
                const containerHeight = container.clientHeight;
                const cardHeight = cardElement.offsetHeight;
                const cardTop = cardElement.offsetTop;
                
                const scrollTop = cardTop - (containerHeight / 2) + (cardHeight / 2);
                
                container.scrollTo({
                    top: scrollTop,
                    behavior: 'smooth'
                });
                
                // 3Ï¥à ÌõÑ Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º Ï†úÍ±∞
                setTimeout(() => setShowMyScore(false), 3000);
            }
        }
    };

    return (
        <div className={styles.rankingBoardMain}>
            <div 
                className={styles.scoreCardBox}
                ref={scrollContainerRef}
            >
                {sortedMembers.map((member, index) => {
                    if (!member) return null;
                    const memberTotalScore = (member?.game1 || 0) + (member?.game2 || 0) + (member?.game3 || 0) + (member?.game4 || 0);
                    const scoreDifference = topTotalScore - memberTotalScore;
                    const isMyScore = memberId === member?.memberId;
                    
                    return (
                        <div 
                            key={index} 
                            className={`${styles.scoreCard} ${getCardClass(member?.grade)} ${isMyScore ? styles.myScoreCard : ""} ${
                                index === 0 ? styles.firstPlace : 
                                index === 1 ? styles.secondPlace : 
                                index === 2 ? styles.thirdPlace : ""
                            }`}
                            ref={isMyScore ? myScoreRef : null}
                        >
                            {/* ÏàúÏúÑ Î∞∞ÏßÄ */}
                            <div className={styles.rankBadge}>
                                <span className={styles.rankNumber}>{index + 1}</span>
                                {/* 1Îì±Í≥ºÏùò ÌïÄ Ï∞®Ïù¥ ÌëúÏãú */}
                                {index > 0 && scoreDifference > 0 && (
                                    <div className={styles.pinDifference}>
                                        <span>-{scoreDifference}</span>
                                    </div>
                                )}
                            </div>
                            
                            {/* Î©îÎã¨ ÏïÑÏù¥ÏΩò (1, 2, 3Îì±Îßå) */}
                            {index === 0 && <span className={styles.firstPlaceMedal}>ü•á</span>}
                            {index === 1 && <span className={styles.secondPlaceMedal}>ü•à</span>}
                            {index === 2 && <span className={styles.thirdPlaceMedal}>ü•â</span>}

                            {/* ÌîÑÎ°úÌïÑ ÏÑπÏÖò */}
                            <div className={styles.profileSection}>
                                <div className={styles.profileImageContainer}>
                                    {member?.memberProfile ? (
                                        <img className={styles.profileImage} src={member?.memberProfile} alt="Profile" />
                                    ) : (
                                        <div className={styles.defaultProfile}>
                                            <i className="fa-solid fa-user"></i>
                                        </div>
                                    )}
                                    {member?.memberRole === "MASTER" && 
                                        <img className={styles.roleBadge} src={require("../../imges/club/master.png")} alt="Master" />
                                    }
                                    {member?.memberRole === "STAFF" && 
                                        <img className={styles.roleBadge} src={require("../../imges/club/staff.png")} alt="Staff" />
                                    }
                                </div>
                                <div className={styles.memberInfo}>
                                    <h3 className={styles.memberName}>{member?.memberName}</h3>
                                    <div className={styles.memberDetails}>
                                        <span className={styles.gradeInfo}>
                                            {member?.grade === 0 ? "Ïã†ÏûÖ" : `${member?.grade}Íµ∞`}
                                        </span>
                                        <span className={styles.avgInfo}>
                                            ÏóêÎ≤Ñ: {member?.memberAvg === 0 ? "Ïã†ÏûÖ" : member?.memberAvg}
                                        </span>
                                    </div>
                                </div>
                            </div>

                            {/* Ï†êÏàò ÏÑπÏÖò */}
                            <div className={styles.scoreSection}>
                                <div className={styles.scoreGrid}>
                                    <div className={styles.scoreItem}>
                                        <span className={styles.gameLabel}>1G</span>
                                        <span className={`${styles.gameScore} ${(member && member?.game1 >= 200) ? styles.highScore : ""}`}>
                                            {member?.game1 == null ? "-" : member?.game1}
                                        </span>
                                    </div>
                                    <div className={styles.scoreItem}>
                                        <span className={styles.gameLabel}>2G</span>
                                        <span className={`${styles.gameScore} ${(member && member?.game2 >= 200) ? styles.highScore : ""}`}>
                                            {member?.game2 == null ? "-" : member?.game2}
                                        </span>
                                    </div>
                                    <div className={styles.scoreItem}>
                                        <span className={styles.gameLabel}>3G</span>
                                        <span className={`${styles.gameScore} ${(member && member?.game3 >= 200) ? styles.highScore : ""}`}>
                                            {member?.game3 == null ? "-" : member?.game3}
                                        </span>
                                    </div>
                                    <div className={styles.scoreItem}>
                                        <span className={styles.gameLabel}>4G</span>
                                        <span className={`${styles.gameScore} ${(member && member?.game4 >= 200) ? styles.highScore : ""}`}>
                                            {member?.game4 == null ? "-" : member?.game4}
                                        </span>
                                    </div>
                                </div>
                                
                                <div className={styles.totalSection}>
                                    <div className={styles.totalItem}>
                                        <span className={styles.totalLabel}>ÌèâÍ∑†</span>
                                        <span className={`${styles.totalScore} ${getAvgScore(member?.game1, member?.game2, member?.game3, member?.game4) >= 200 ? styles.highScore : ""}`}>
                                            {getAvgScore(member?.game1, member?.game2, member?.game3, member?.game4)}
                                        </span>
                                    </div>
                                    <div className={styles.totalItem}>
                                        <span className={styles.totalLabel}>Ï¥ùÏ†ê</span>
                                        <span className={`${styles.totalScore} ${(member && memberTotalScore >= 800) ? styles.highScore : ""}`}>
                                            {memberTotalScore}
                                        </span>
                                    </div>
                                </div>
                            </div>

                            {/* ÎÇ¥ Ï†êÏàò Í∞ïÏ°∞ Ìö®Í≥º */}
                            {isMyScore && showMyScore && (
                                <div className={styles.myScoreHighlight}>
                                    <i className="fa-solid fa-star"></i>
                                    ÎÇ¥ Ï†êÏàò
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>

            {/* ÌïòÎã® Î≤ÑÌäºÎì§ */}
            <div className={styles.modalContainer}>
                <div className={styles.modalBox}>
                    <div className={styles.modal} onClick={sideRankingModalToggle}>
                        <i className="fa-solid fa-ranking-star"></i>
                        <span className={styles.title}>ÏÇ¨Ïù¥Îìú ÏàúÏúÑ</span>
                    </div>
                </div>
                <div className={`${styles.modalBox} ${isScoreInputBlocked ? styles.disabled : ""}`}>
                    <div 
                        className={`${styles.modal} ${isScoreInputBlocked ? styles.disabledModal : ""}`} 
                        onClick={isScoreInputBlocked ? null : scoreInputModalToggle}
                        style={{ cursor: isScoreInputBlocked ? 'not-allowed' : 'pointer' }}
                    >
                        <i className="fa-solid fa-plus-minus"></i>
                        <span className={styles.title}>
                            {isScoreCountingStopped ? "Ï†êÏàò ÏßëÍ≥Ñ Ï¢ÖÎ£å" : "Ï†êÏàò ÏûÖÎ†•"}
                        </span>
                    </div>
                </div>
                <div className={styles.modalBox}>
                    <div className={styles.modal} onClick={findMyScore}>
                        <i className="fa-solid fa-star"></i>
                        <span className={styles.title}>ÎÇ¥ Ï†êÏàò Ï∞æÍ∏∞</span>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default RankingBoard;